<?php

// Параметры будем брать из POST-запроса (по отправке формы)
if (!isset($_POST['n']) && !isset($_POST['k'])) {
// если переменные не заданы - выведем форму для ввода n и k    
    print_form();
    return;
} else {
    // если переменные заданы (пришел POST-запрос) то проверяем их и делаем сортировку
    $n = $_POST['n'];
    $k = $_POST['k'];

    // проверяем - если в post-запросе переменные не были заданы - выведем
    // форму для n и k.
    if (empty($n) || empty($k)) {
        print_form();
        return;
    }

    // Ok, теперь точно переменные заданы. Делаем сортировку.

    $array = array();
    // создаем массив из n натуральных чисел
    for ($i = 1; $i <= $n; $i++) {
        $array[] = $i;
    }
    // Вызов функции сортировки
    qsort($array);

    $res = 0; // для результата - место числа k в массиве чисел
    // Выводим упорядоченный массив и ищем результат
    for ($i = 0; $i < count($array); $i++) {
        echo ($array[$i] . " "); // выводим очередное число массива
        if ($array[$i] == $k) // если оно равно заданному k - вот ответ
            // индексация массива с 0 идет, а 0-й элемент -            
            // это первое число массива, поэтому +1.
            $res = $i + 1;
    }
    // вывод результата - если нашли число и если не нашли
    if ($res > 0)
        echo '<br/>Результат: число ' . $k . ' стоит на ' . $res . ' месте';
    else
        echo '<br/>Результат: число ' . $k . ' не найдено в массиве';

    // Выведем ссылку на повтор
    echo '</br></br><a href="zadanie3.php">Повторить</a>';
}

// Функция показа формы для ввода параметров
function print_form() {

    echo '<form action="zadanie3.php" method="post">
          <label for="n">Введите n:</label>
          <input type="number" id="n" name="n"><br/>
          <label for="k">Введите k:</label>
          <input type="number" id="k" name="k"><br/>
          <input type="submit" value="Отправить">
          </form>';
}

/*
 * Функция сравнения одного числа с другим.
 * используется strcmp - она сравнивает строки лексикографически
 * возвращает > 0 если первое число "больше" второго лексикографически,
 * < 0 если первое число "меньше" и = 0 если одинаковые
 * В данном случае $first и $second рассматриваются как строковые значения!
 */

function compare($first, $second) {
    $res = strcmp($first, $second);
    return $res;
}

/*
 * Функция вычисляет количество элементов,
 * тем самым подготавливая параметры для первого запуска,
 * и запускает сам процесс сортировки
 */

function qsort(&$array) {

    $left = 0;
    $right = count($array) - 1;

    my_sort($array, $left, $right);
}

/*
 * Функция, непосредственно производящая сортировку. 
 * Алгоритм - "быстрая" сортировка - quicksort.
 * Так как массив передается по ссылке, функция ничего не возвращает.
 */

function my_sort(&$array, $left, $right) {

    //Создаем копии пришедших переменных, с которыми будем манипулировать в дальнейшем.
    $l = $left;
    $r = $right;

    //Вычисляем 'центр', на который будем опираться. Берем значение ~центральной ячейки массива.
    $center = $array[(int) ($left + $right) / 2];

    //Цикл, начинающий саму сортировку
    do {

        //Ищем значения больше 'центра'
        //while ($array[$r] > $center) { 
        while (compare($array[$r], $center) > 0) {
            $r--;
        }

        //Ищем значения меньше 'центра'
        //while ($array[$l] < $center) { 
        while (compare($array[$l], $center) < 0) {
            $l++;
        }

        //После прохода циклов проверяем счетчики циклов
        if ($l <= $r) {

            //И если условие true, то меняем ячейки друг с другом.
            list($array[$r], $array[$l]) = array($array[$l], $array[$r]);

            //И переводим счетчики на следующий элементы
            $l++;
            $r--;
        }

        //Повторяем цикл, если true
    } while ($l <= $r);

    if ($r > $left) {
        //Если условие true, совершаем рекурсию
        //Передаем массив, исходное начало и текущий конец
        my_sort($array, $left, $r);
    }

    if ($l < $right) {
        //Если условие true, совершаем рекурсию
        //Передаем массив, текущие начало и конец
        my_sort($array, $l, $right);
    }

    //Сортировка завершена
}
